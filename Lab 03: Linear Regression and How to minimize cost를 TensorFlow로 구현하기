Cost function in pure Python (코스트 함수를 파이썬으로 구동하기)
import numpy as np → numpy라는 패키지를 불러오면서 코드를 쓸 때 numpy를 np로 사용하기

X = np.array([1, 2, 3]) → x 데이터 값
Y = np.array([1, 2, 3]) → y 데이터 값

def cost_func(W, X, Y):  → cost function
    c = 0
    for i in range(len(X)):
        c += (W * X[i] - Y[i]) ** 2 → 예측값-실제값 = 오차 제곱한 값을 c에 누적
    return c / len(X) → 편차제곱의 평균=cost function
 
for feed_W in np.linspace(-3, 5, num=15): 
    curr_cost = cost_func(feed_W, X, Y)
    print("{:6.3f} | {:10.5f}".format(feed_W, curr_cost))

→ -3에서 5사이를 15개 구간으로 나누어서 구간값을 출력  

→ 결과값
   w         cost
-3.000 |   74.66667
-2.429 |   54.85714
-1.857 |   38.09524
-1.286 |   24.38095
-0.714 |   13.71429
-0.143 |    6.09524
 0.429 |    1.52381
 1.000 |    0.00000
 1.571 |    1.52381
 2.143 |    6.09524
 2.714 |   13.71429
 3.286 |   24.38095
 3.857 |   38.09524
 4.429 |   54.85714
 5.000 |   74.66667
 
Gradient descent 구현
tf.set_random_seed(0)  # for reproducibility  → 랜덤시드를 특정한 값으로 초기화

x_data = [1., 2., 3., 4.] → x값 데이터
y_data = [1., 3., 5., 7.] → y값 데이터

W = tf.Variable(tf.random_normal([1], -100., 100.)) → 정규분포를 따르는 변수륾 만들어 w에 할당

for step in range(300): 
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y)) → 차의제곱의 평균

    alpha = 0.01
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assign(descent)
    
    → gfadient 학습을 300번 실행
    
    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0]))
    
    → 10번에 한번씩 cost값과 w값을 출력
    
    0 | 11716.3086 |  48.767971
   10 |  4504.9126 |  30.619968
   20 |  1732.1364 |  19.366755
   30 |   666.0052 |  12.388859
   40 |   256.0785 |   8.062004
   50 |    98.4620 |   5.379007
   60 |    37.8586 |   3.715335
   70 |    14.5566 |   2.683725
   80 |     5.5970 |   2.044044
   90 |     2.1520 |   1.647391
  100 |     0.8275 |   1.401434
  110 |     0.3182 |   1.248922
  120 |     0.1223 |   1.154351
  130 |     0.0470 |   1.095710
  140 |     0.0181 |   1.059348
  150 |     0.0070 |   1.036801
  160 |     0.0027 |   1.022819
  170 |     0.0010 |   1.014150
  180 |     0.0004 |   1.008774
  190 |     0.0002 |   1.005441
  200 |     0.0001 |   1.003374
  210 |     0.0000 |   1.002092
  220 |     0.0000 |   1.001297
  230 |     0.0000 |   1.000804
  240 |     0.0000 |   1.000499
  250 |     0.0000 |   1.000309
  260 |     0.0000 |   1.000192
  270 |     0.0000 |   1.000119
  280 |     0.0000 |   1.000074
  290 |     0.0000 |   1.000046  
  
  → 처음에 cost는 큰 값을 가지다가 급속히 줄어서 0으로 수렴 w값은 처음에 임의의 값 이었다가 특정값으로 쭉 수렴하는 것을 볼 수 있음
  
x_data = [1., 2., 3., 4.] → x값 데이터
y_data = [1., 3., 5., 7.] → y값 데이터

W = tf.Variable([5.0]) → w값을 5.0으로 특정한 값을 줌

for step in range(300): 
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y)) → 차의제곱의 평균

    alpha = 0.01
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))
    descent = W - tf.multiply(alpha, gradient)
    W.assign(descent)
    
    → gfadient 학습을 300번 실행
    
    if step % 10 == 0:
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0])
 
 → 10번에 한번씩 cost값과 w값을 출력
 
 → 결과값
 
    0 |    74.6667 |   4.813334
   10 |    28.7093 |   3.364572
   20 |    11.0387 |   2.466224
   30 |     4.2444 |   1.909177
   40 |     1.6320 |   1.563762
   50 |     0.6275 |   1.349578
   60 |     0.2413 |   1.216766
   70 |     0.0928 |   1.134412
   80 |     0.0357 |   1.083346
   90 |     0.0137 |   1.051681
  100 |     0.0053 |   1.032047
  110 |     0.0020 |   1.019871
  120 |     0.0008 |   1.012322
  130 |     0.0003 |   1.007641
  140 |     0.0001 |   1.004738
  150 |     0.0000 |   1.002938
  160 |     0.0000 |   1.001822
  170 |     0.0000 |   1.001130
  180 |     0.0000 |   1.000700
  190 |     0.0000 |   1.000434
  200 |     0.0000 |   1.000269
  210 |     0.0000 |   1.000167
  220 |     0.0000 |   1.000103
  230 |     0.0000 |   1.000064
  240 |     0.0000 |   1.000040
  250 |     0.0000 |   1.000025
  260 |     0.0000 |   1.000015
  270 |     0.0000 |   1.000009
  280 |     0.0000 |   1.000006
  290 |     0.0000 |   1.000004
  
  → 즉 w값을 특정한 값을 주어도 결과는 동일합니다.
  cost 숫자에서 0으로 수렴 w는 특정한 값으로 수렴한다는 것을 확인 할 수 있습니다. 
  
  
   
